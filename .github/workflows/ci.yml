name: ci
on:
  push:
    branches:
      - main
    tags:
      - '*'
concurrency:
  group: '${{ github.workflow }}-${{ !contains(github.event.pull_request.labels.*.name, ''ci-test-flaky'') && github.head_ref || github.run_id }}'
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  build:
    name: '${{ matrix.job }} ${{ matrix.profile }} ${{ matrix.os }}'
    runs-on: '${{ matrix.runner || matrix.os }}'
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-12
            job: test
            profile: release
          - os: windows-2022
            runner: windows-2022
            job: test
            profile: release
          - os: ubuntu-20.04
            job: test
            profile: release
            use_sysroot: true
    env:
      CARGO_TERM_COLOR: always
      RUST_BACKTRACE: full
    steps:
      - name: Configure git
        run: |-
          git config --global core.symlinks true
          git config --global fetch.parallel 32
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 5
          submodules: false
          path: byt
      - uses: actions/checkout@v3
        with:
          repository: "skorfmann/deno"
          ref: "rust-cli"
          path: deno
      - name: 'Create source tarballs (release, linux)'
        if: |-
          startsWith(matrix.os, 'ubuntu') &&
          matrix.profile == 'release' &&
          matrix.job == 'test' &&
          github.repository == 'byt-dev/runtime' &&
          startsWith(github.ref, 'refs/tags/')
        run: |-
          cd byt
          mkdir -p target/release
          tar --exclude=".git*" --exclude=target --exclude=third_party/prebuilt \
              -czvf target/release/byt_src.tar.gz -C .. byt
      - uses: dtolnay/rust-toolchain@stable
      - name: Configure canary build
        if: |-
          matrix.profile == 'release' &&
          github.repository == 'byt-dev/runtime' &&
          github.ref == 'refs/heads/main'
        shell: bash
        run: echo "BYT_CANARY=true" >> $GITHUB_ENV
      # - if: 'matrix.use_sysroot'
      #   name: Set up incremental LTO and sysroot build
      #   run: |-
      #     # Avoid running man-db triggers, which sometimes takes several minutes
      #     # to complete.
      #     sudo apt-get remove --purge -y man-db

      #     # Install clang-15, lld-15, and debootstrap.
      #     echo "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-15 main" |
      #       sudo dd of=/etc/apt/sources.list.d/llvm-toolchain-focal-15.list
      #     curl https://apt.llvm.org/llvm-snapshot.gpg.key |
      #       gpg --dearmor                                 |
      #     sudo dd of=/etc/apt/trusted.gpg.d/llvm-snapshot.gpg
      #     sudo apt-get update
      #     # this was unreliable sometimes, so try again if it fails
      #     sudo apt-get install debootstrap clang-15 lld-15 pkg-config libssl-dev || echo 'Failed. Trying again.' && sudo apt-get clean && sudo apt-get update && sudo apt-get install debootstrap clang-15 lld-15 pkg-config libssl-dev

      #     # Create ubuntu-16.04 sysroot environment, which is used to avoid
      #     # depending on a very recent version of glibc.
      #     # `libc6-dev` is required for building any C source files.
      #     # `file` and `make` are needed to build libffi-sys.
      #     # `curl` is needed to build rusty_v8.
      #     sudo debootstrap                                     \
      #       --include=ca-certificates,curl,file,libc6-dev,make,pkg-config,libssl-dev \
      #       --no-merged-usr --variant=minbase xenial /sysroot  \
      #       http://azure.archive.ubuntu.com/ubuntu
      #     sudo mount --rbind /dev /sysroot/dev
      #     sudo mount --rbind /sys /sysroot/sys
      #     sudo mount --rbind /home /sysroot/home
      #     sudo mount -t proc /proc /sysroot/proc

      #     # Configure the build environment. Both Rust and Clang will produce
      #     # llvm bitcode only, so we can use lld's incremental LTO support.
      #     cat >> $GITHUB_ENV << __0
      #     CARGO_PROFILE_BENCH_INCREMENTAL=false
      #     CARGO_PROFILE_BENCH_LTO=false
      #     CARGO_PROFILE_RELEASE_INCREMENTAL=false
      #     CARGO_PROFILE_RELEASE_LTO=false
      #     RUSTFLAGS<<__1
      #       -C linker-plugin-lto=true
      #       -C linker=clang-15
      #       -C link-arg=-fuse-ld=lld-15
      #       -C link-arg=--sysroot=/sysroot
      #       -C link-arg=-Wl,--allow-shlib-undefined
      #       -C link-arg=-Wl,--thinlto-cache-dir=$(pwd)/target/release/lto-cache
      #       -C link-arg=-Wl,--thinlto-cache-policy,cache_size_bytes=700m
      #       ${{ env.RUSTFLAGS }}
      #     __1
      #     RUSTDOCFLAGS<<__1
      #       -C linker-plugin-lto=true
      #       -C linker=clang-15
      #       -C link-arg=-fuse-ld=lld-15
      #       -C link-arg=--sysroot=/sysroot
      #       -C link-arg=-Wl,--allow-shlib-undefined
      #       -C link-arg=-Wl,--thinlto-cache-dir=$(pwd)/target/release/lto-cache
      #       -C link-arg=-Wl,--thinlto-cache-policy,cache_size_bytes=700m
      #       ${{ env.RUSTFLAGS }}
      #     __1
      #     CC=clang-15
      #     CFLAGS=-flto=thin --sysroot=/sysroot
      #     __0
      - name: Cache Cargo home
        uses: actions/cache@v3
        with:
          path: |-
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: '18-cargo-home-${{ matrix.os }}-${{ hashFiles(''Cargo.lock'') }}'
      - name: Restore cache build output (PR)
        uses: actions/cache/restore@v3
        if: 'github.ref != ''refs/heads/main'' && !startsWith(github.ref, ''refs/tags/'')'
        with:
          path: |-
            ./target
            !./target/*/gn_out
            !./target/*/*.zip
            !./target/*/*.tar.gz
          key: never_saved
          restore-keys: '19-cargo-target-${{ matrix.os }}-${{ matrix.profile }}-'
      - name: Shallow clone crates.io index
        shell: bash
        run: |-
          if [ ! -d ~/.cargo/registry/index/github.com-1ecc6299db9ec823/.git ]
          then
            git clone --depth 1 --no-checkout                      \
                      https://github.com/rust-lang/crates.io-index \
                      ~/.cargo/registry/index/github.com-1ecc6299db9ec823
          fi
        if: '!(github.event_name == ''pull_request'' && matrix.skip_pr) && (steps.exit_early.outputs.EXIT_EARLY != ''true'')'
      - name: Build fastci
        if: 'matrix.profile == ''fastci'''
        run: cd byt && cargo build --locked --all-targets
        env:
          CARGO_PROFILE_DEV_DEBUG: 0
      - name: Build release
        if: |-
          matrix.profile == 'release' && (matrix.use_sysroot ||
          (github.repository == 'byt-dev/runtime' &&
          (github.ref == 'refs/heads/main' ||
          startsWith(github.ref, 'refs/tags/'))))
        run: cd byt && cargo build --release --locked --all-targets
      - name: Upload PR artifact (linux)
        if: |-
          matrix.profile == 'release' && (matrix.use_sysroot ||
          (github.repository == 'byt-dev/runtime' &&
          (github.ref == 'refs/heads/main' ||
          startsWith(github.ref, 'refs/tags/'))))
        uses: actions/upload-artifact@v3
        with:
          name: 'byt-${{ github.event.number }}'
          path: byt/target/release/byt
      - name: Pre-release (linux)
        if: |-
          startsWith(matrix.os, 'ubuntu') &&
          matrix.job == 'test' &&
          matrix.profile == 'release' &&
          github.repository == 'byt-dev/runtime'
        run: |-
          cd byt/target/release
          zip -r byt-x86_64-unknown-linux-gnu.zip byt
      - name: Pre-release (mac)
        if: |-
          !(github.event_name == 'pull_request' && matrix.skip_pr) && (steps.exit_early.outputs.EXIT_EARLY != 'true' && (startsWith(matrix.os, 'macOS') &&
          matrix.job == 'test' &&
          matrix.profile == 'release' &&
          github.repository == 'byt-dev/runtime' &&
          (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))))
        run: |-
          cd byt/target/release
          zip -r byt-x86_64-apple-darwin.zip byt
      - name: Pre-release (windows)
        if: |-
          !(github.event_name == 'pull_request' && matrix.skip_pr) && (steps.exit_early.outputs.EXIT_EARLY != 'true' && (startsWith(matrix.os, 'windows') &&
          matrix.job == 'test' &&
          matrix.profile == 'release' &&
          github.repository == 'byt-dev/runtime' &&
          (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))))
        run: Compress-Archive -CompressionLevel Optimal -Force -Path byt/target/release/byt.exe -DestinationPath byt/target/release/byt-x86_64-pc-windows-msvc.zip
      - name: Test fastci
        if: 'matrix.job == ''test'' && matrix.profile == ''fastci'''
        run: |-
          cd byt
          cargo test --locked --lib
          cargo test --locked --test '*'
        env:
          CARGO_PROFILE_DEV_DEBUG: 0
      - name: Test release
        if: |-
          !(github.event_name == 'pull_request' && matrix.skip_pr) && (steps.exit_early.outputs.EXIT_EARLY != 'true' && (matrix.job == 'test' && matrix.profile == 'release' &&
          (matrix.use_sysroot || (
          github.repository == 'byt-dev/runtime' &&
          github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')))))
        run: cd byt && cargo test --release --locked
      - name: Upload release to GitHub
        uses: softprops/action-gh-release@v0.1.15
        if: |-
          !(github.event_name == 'pull_request' && matrix.skip_pr) && (steps.exit_early.outputs.EXIT_EARLY != 'true' && (matrix.job == 'test' &&
          matrix.profile == 'release' &&
          github.repository == 'byt-dev/runtime' &&
          startsWith(github.ref, 'refs/tags/')))
        with:
          files: |-
            byt/target/release/byt-x86_64-pc-windows-msvc.zip
            byt/target/release/byt-x86_64-unknown-linux-gnu.zip
            byt/target/release/byt-x86_64-apple-darwin.zip
            byt/target/release/byt_src.tar.gz
          draft: true
      - name: Save cache build output (main)
        uses: actions/cache/save@v3
        if: '!(github.event_name == ''pull_request'' && matrix.skip_pr) && (steps.exit_early.outputs.EXIT_EARLY != ''true'' && ((matrix.profile == ''release'' || matrix.profile == ''fastci'') && github.ref == ''refs/heads/main''))'
        with:
          path: |-
            ./byt/target
            !./byt/target/*/gn_out
            !./byt/target/*/*.zip
            !./byt/target/*/*.tar.gz
          key: '18-cargo-target-${{ matrix.os }}-${{ matrix.profile }}-${{ github.sha }}'